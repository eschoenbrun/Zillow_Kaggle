import csv
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
import gc

## Load Data
df = pd.read_csv('C:/Users/Stevens/Desktop/BIA 686/zillow/bia_686/data/properties_2016.csv', header='infer')
target = pd.read_csv('C:/Users/Stevens/Desktop/BIA 686/zillow/bia_686/data/train_2016_v2.csv', header='infer')

# Determine data types 
# df.iloc[:, np.r_[22,32,34,49,55]]

# Should we change date from float to datetime?
# pd.to_datetime(prop_data.assessmentyear).dt.year.head(5)
# pd.to_datetime(prop_data.assessmentyear)
# pd.to_datetime(prop_data.taxdelinquencyyear)
# pd.to_datetime(prop_data.yearbuilt)

## Format dates
target.transactiondate = pd.to_datetime(target.transactiondate,format='%Y-%m-%d')

## Join dataframes
joined_data = pd.merge(target,df,on="parcelid",how="left")

# Database characteristics
joined_data.info()
joined_data.describe()
joined_data.dtypes

# Numerical Data
num_cols = ['parcelid', 'logerror', 'basementsqft',	'bathroomcnt',	'bedroomcnt',	'calculatedbathnbr', 'calculatedfinishedsquarefeet',	'finishedfloor1squarefeet',	'finishedsquarefeet12',	'finishedsquarefeet13',	'finishedsquarefeet15',	'finishedsquarefeet50',	'finishedsquarefeet6',	'fireplacecnt',	'fullbathcnt',	'garagecarcnt',	'garagetotalsqft',	'landtaxvaluedollarcnt',	'lotsizesquarefeet',	'numberofstories',	'poolcnt',	'poolsizesum',	'roomcnt',	'structuretaxvaluedollarcnt',	'taxamount',	'taxvaluedollarcnt',	'threequarterbathnbr',	'unitcnt',	'yardbuildingsqft17',	'yardbuildingsqft26']
num_data = joined_data[num_cols]

# Database characteristics
num_data.info()
num_data.describe()
zeros = (num_data[:] == 0).sum()/len(num_data)*100
zeros = zeros.reset_index()

nulls = num_data.isnull().sum()/len(num_data)*100
nulls = nulls.reset_index()

stats = pd.merge(zeros, nulls, on='index')
stats.columns = ['factors', 'perc_zero', 'perc_null']      
stats.sort_values('perc_zero', inplace=True)
stats.perc_zero.index = stats.factors
stats.perc_zero.plot(kind='bar', figsize=(24,6))

# Graphs
plt.style.use('fivethirtyeight')
for i, col in enumerate(num_data.columns[2:]):
    fig = plt.figure(i)
    ax1 = fig.add_subplot(221)
    ax2 = fig.add_subplot(222)
    ax3 = fig.add_subplot(223)
    
    # Log transformation for skewed data
    sns.boxplot(num_data[col].dropna(), orient='v', ax=ax2)
    plt.xlabel(col)
    
    num_data[col] = np.log1p(num_data[col].dropna())
    g = sns.regplot(x=col, y='logerror', data=num_data, ax=ax3 ,ci = False,
        scatter_kws={"color":"darkred","alpha":0.3,"s":90},
        line_kws={"color":"g","alpha":0.5,"lw":4},marker="x")
    
    sns.distplot(np.log1p(num_data[col].dropna()), color = "orange", kde = True, ax=ax1)

    plt.tight_layout()
    plt.show()

# Compute the correlation matrix
corr = num_data.iloc[:, 1:].corr()

# Draw the heatmap 
f, ax = plt.subplots(figsize=(20,20))
ax = sns.heatmap(corr, cmap="coolwarm", fmt='.0%',
    linecolor='white',linewidths=1, annot=True)
